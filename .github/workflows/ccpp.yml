name: C/C++ CI

on:
  push:
    branches:
      - master
      - MPI_Development
      - cmake_development
      - parUpscale
      - sharedLHF

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        mpi:
          - mpich
          - openmpi
          - msmpi # Only builds for Windows
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        exclude:
          - os: ubuntu-latest
            mpi: msmpi #MSMPI only exists on windows
          - os: macos-latest
            mpi: msmpi #MSMPI only exists on windows
          - os: windows-latest
            mpi: openmpi #OpenMPI discontinued on windows
          - os: windows-latest
            mpi: mpich #MPICH redirects to MSMPI
            ##TODO: Test with windows-latest and msmpi
    
    steps:
    - uses: actions/checkout@v4

    # ------------------------------------------------------------
    # Linux Setup
    # ------------------------------------------------------------
    - name: Linux Apt update (${{ matrix.os }} , ${{ matrix.mpi }})
      if:   contains(matrix.os,'ubuntu')
      run:  sudo apt-get update
    
    - name: Get Linux OpenMPI dependencies (${{ matrix.os }} , ${{ matrix.mpi }})
      if:   contains(matrix.os,'ubuntu') && contains(matrix.mpi,'openmpi')
      run:  sudo apt-get install -y openmpi-bin openmpi-common libopenmpi-dev cppcheck libeigen3-dev libcgal-dev
      
    - name: Get Linux MPICH dependencies (${{ matrix.os }} , ${{ matrix.mpi }})
      if:   contains(matrix.os,'ubuntu') && contains(matrix.mpi,'mpich')
      run:  sudo apt-get install -y mpich cppcheck libeigen3-dev libcgal-dev

    # ------------------------------------------------------------
    # macOS Setup
    # ------------------------------------------------------------
    - name: Get MacOS OpenMPI dependencies (${{ matrix.os }} , ${{ matrix.mpi }})
      if:   contains(matrix.os,'macos') && contains(matrix.mpi,'openmpi')
      run:  brew install gcc openmpi libomp eigen cgal
      
    - name: Get MacOS MPICH dependencies (${{ matrix.os }} , ${{ matrix.mpi }})
      if:   contains(matrix.os,'macos') && contains(matrix.mpi,'mpich')
      run:  brew install gcc mpich libomp eigen cgal

    # ------------------------------------------------------------
    # Windows Setup (vcpkg)
    # ------------------------------------------------------------
    - name: Cache vcpkg binaries
      if: contains(matrix.os, 'windows-latest')
      uses: actions/cache@v3
      with:
        path: ${{ env.VCPKG_DEFAULT_BINARY_CACHE }}
        key: vcpkg-${{ runner.os }}-${{ hashFiles('**/vcpkg.json') }}
        restore-keys: |
          vcpkg-${{ runner.os }}-

    # ------------------------------------------------------------
    # ðŸ”§ Configure and Build (All Platforms)
    # ------------------------------------------------------------

    - name: Check CMake version
      run: cmake --version

    # Configure via preset (instead of -D flags)
    - name: Configure CMake
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cmake --preset windows-release
        else
          cmake --preset release
        fi
      shell: bash

    # Build using preset with parallel jobs
    - name: Build project
      run: |
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cmake --build --preset windows-release --parallel 4
        else
          cmake --build --preset release --parallel 4
        fi
      shell: bash